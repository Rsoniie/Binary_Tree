****************USING LEVEL ORDER TRAVERSAL*********WITH QUEUE DATA STRUCTURE*******
#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

vector<int> getLeftView(TreeNode<int> *root)
{
     vector<int> ans;
     if(root == NULL)
     {
         return ans;
     }

     queue<pair<TreeNode<int>*,int>>  q;
     // queue for node and level
     unordered_map<int, int> m;
     q.push({root, 0});
     while(!q.empty())
     {
         TreeNode<int>* node =  q.front().first;
         int lvl = q.front().second;
         q.pop();
         if(m.find(lvl) == m.end())
         {
             ans.push_back(node -> data);
             m[lvl]++;
         }
         lvl++;
         if(node -> left)
         {
             q.push({node -> left, lvl});
         }
         if(node -> right)
         {
             q.push({node -> right, lvl});
         }
     }

     return ans;
}
